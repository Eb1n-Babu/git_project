Key Steps to Get Started

Create a project folder
Navigate to the folder
Initialize a Git repository

Initialize Git

git init 

Create a New File

touch git.txt
touch README.md

Here are some key commands for staging:

git add <file> - Stage a file
git add --all or git add -A - Stage all changes
git status - See what is staged
git restore --staged <file> - Unstage a file

Troubleshooting

Staged the wrong file? Use git restore --staged <file> to unstage it.
Forgot to stage a file? Just run git add <file> again before you commit.
Not sure what's staged? Run git status to see what will be committed.

commit 

git commit -m "message" - Commit staged changes with a message
git commit -a -m "message" - Commit all tracked changes (skip staging)
git log - See commit history


Other Useful Commit Options

Create an empty commit:
git commit --allow-empty -m "Start project"
Use previous commit message (no editor):
git commit --no-edit
Quickly add staged changes to last commit, keep message:
git commit --amend --no-edit

Use previous commit message (no editor):

=============================================

Troubleshooting Common Commit Mistakes
Forgot to stage a file?
If you run git commit -m "message" but forgot to git add a file, just add it and commit again. Or use git commit --amend to add it to your last commit.
Typo in your commit message?
Use git commit --amend -m "Corrected message" to fix the last commit message.
Accidentally committed the wrong files?
You can use git reset --soft HEAD~1 to undo the last commit and keep your changes staged.

What is a Tag?

A tag in Git is like a label or bookmark for a specific commit.

Tags are most often used to mark important points in your project history, like releases (v1.0 or v2.0).

Tags are a simple and reliable way to keep track of versions and share them with your team or users.

Some common tag types include:

Releases: Tags let you mark when your project is ready for release, so you (and others) can always find that exact version later.
Milestones: Use tags to highlight major milestones, like when a big feature is finished or a bug is fixed.
Deployment: Many deployment tools use tags to know which version of your code to deploy.
Hotfixes: If you need to fix an old version, tags make it easy to check out and patch the right code.

git tag -a v1.0 -m "Version 1.0 release"
git tag v1.1 1a2b3c4d
git tag
git show v1.0

git push origin v1.0
git push --tags
git tag -d v1.0
git push origin --delete tag v1.0
git tag -f v1.0 <new-commit-hash>
git push --force origin v1.0

Troubleshooting
Tag already exists? Use git tag -d <tagname> to delete it, then re-create.
Pushed the wrong tag? Delete it locally and remotely, then push the correct tag.
Tag not showing on remote? Remember to push tags with git push origin <tagname> or git push --tags.
Need to overwrite a tag on the remote? You can force-push a tag with git push --force origin <tagname>, but be careful! This will overwrite the tag for everyone using the remote.
