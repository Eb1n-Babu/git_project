Key Steps to Get Started

Create a project folder
Navigate to the folder
Initialize a Git repository

Initialize Git

git init 

Create a New File

touch git.txt
touch README.md

Here are some key commands for staging:

git add <file> - Stage a file
git add --all or git add -A - Stage all changes
git status - See what is staged
git restore --staged <file> - Unstage a file

Troubleshooting

Staged the wrong file? Use git restore --staged <file> to unstage it.
Forgot to stage a file? Just run git add <file> again before you commit.
Not sure what's staged? Run git status to see what will be committed.

commit 

git commit -m "message" - Commit staged changes with a message
git commit -a -m "message" - Commit all tracked changes (skip staging)
git log - See commit history


Other Useful Commit Options

Create an empty commit:
git commit --allow-empty -m "Start project"
Use previous commit message (no editor):
git commit --no-edit
Quickly add staged changes to last commit, keep message:
git commit --amend --no-edit

Use previous commit message (no editor):

=============================================

Troubleshooting Common Commit Mistakes
Forgot to stage a file?
If you run git commit -m "message" but forgot to git add a file, just add it and commit again. Or use git commit --amend to add it to your last commit.
Typo in your commit message?
Use git commit --amend -m "Corrected message" to fix the last commit message.
Accidentally committed the wrong files?
You can use git reset --soft HEAD~1 to undo the last commit and keep your changes staged.


